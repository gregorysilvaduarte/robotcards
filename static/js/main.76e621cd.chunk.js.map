{"version":3,"sources":["assets/images/map.png","components/SearchBox.js","components/Card.js","components/CardList.js","assets/style/Scroll.js","components/helpers/Scroll.js","assets/style/Loading.js","components/helpers/Loading.js","assets/style/App.js","components/helpers/ErrorBoundry.js","containers/App.js","helpers/util.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","searchChange","type","placeholder","onChange","Card","name","email","address","active","className","alt","width","src","mapImage","street","suite","city","CardList","robots","length","map","user","i","key","id","role","aria-label","ScrollWrapper","styled","div","Scroll","props","children","LoadingWrapper","Title","h2","LoadingInner","LoadingBar","LoadingMainBar","Loading","AppWrapper","MainTitle","h1","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","$event","searchfield","target","value","fetch","then","response","json","Math","random","sort","a","b","parameter","filteredRobots","filter","item","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iC,8OCU5BC,EARG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,6BACE,2BAAOC,KAAK,SAASC,YAAY,SAASC,SAAUH,M,+BCkC3CI,EAlCF,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACpC,OACE,yBACEC,UAAS,eACPD,EAAS,kBAAoB,wBADtB,gBAIT,yBAAKC,UAAU,cACb,yBAAKA,UAAS,+BAA0BD,EAAS,OAAS,QACxD,yBAAKC,UAAU,oBACZD,EAAS,YAAc,YAE1B,yBAAKE,IAAKL,EAAMM,MAAM,MAAMC,IAAG,+BAA0BP,KACzD,yBAAKI,UAAU,QACb,4BACE,gCAASJ,IAEX,2BAAIC,KAGR,yBAAKG,UAAS,8BAAyBD,EAAS,OAAS,QACvD,yBAAKE,IAAI,UAAUC,MAAM,MAAMC,IAAKC,MACpC,yBAAKJ,UAAU,QACb,4BACE,gCAASF,EAAQO,OAAjB,MAEF,qCAAOP,EAAQQ,MAAf,cAA0BR,EAAQS,YCE/BC,EA9BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,yBAAKT,UAAS,kBAAaS,EAAOC,OAAS,OAAS,QACjDD,EAAOC,OACND,EAAOE,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,GAAIH,EAAKG,GACTnB,KAAMgB,EAAKhB,KACXC,MAAOe,EAAKf,MACZC,QAASc,EAAKd,QACdC,OAAQa,EAAKb,YAKnB,4BACE,gDAEE,0BAAMiB,KAAK,MAAMC,aAAW,SAA5B,oB,gxBCrBL,IAAMC,EAAgBC,IAAOC,IAAV,KCGXC,EAFA,SAACC,GAAD,OAAW,kBAACJ,EAAD,SAAiBI,EAAMC,SAAvB,M,knCCDnB,IAAMC,EAAiBL,IAAOC,IAAV,KASdK,EAAQN,IAAOO,GAAV,KAMLC,EAAeR,IAAOC,IAAV,KAKZQ,EAAaT,IAAOC,IAAV,KAUVS,EAAiBV,IAAOC,IAAV,KCVZU,EAbC,WACd,OACE,kBAACN,EAAD,KACE,kBAACG,EAAD,KACE,kBAACF,EAAD,mBACA,kBAACG,EAAD,KACE,kBAACC,EAAD,U,6PCbH,IAAME,EAAaZ,IAAOC,IAAV,KAIVY,EAAYb,IAAOc,GAAV,KCkBPC,E,kDArBb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAOG,KAAKJ,MAAMC,SAChB,4BACE,8DAGFG,KAAKjB,MAAMC,a,GAlBUkB,aCgEZC,E,kDAxDb,aAAe,IAAD,8BACZ,gBA4BFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAOE,OAAOC,SA5B3C,EAAKZ,MAAQ,CACX1B,OAAQ,GACRoC,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAD,OACJA,EACGvC,KAAI,YACH,MAAO,CACLI,GAFmC,EAA/BA,GAGJnB,KAHmC,EAA3BA,KAIRC,MAJmC,EAArBA,MAKdC,QALmC,EAAdA,QAMrBC,OAAQqD,KAAKC,UAAY,OAG5BC,MAAK,SAACC,EAAGC,GAAJ,OChCI,SAACD,EAAGC,EAAGC,GACzB,OAAIF,EAAEE,GAAaD,EAAEC,GACZ,EAELF,EAAEE,GAAaD,EAAEC,IACX,EAEH,EDyBiBH,CAAKC,EAAGC,EAAG,cAE9BP,MAAK,SAACxC,GACL,EAAK+B,SAAS,CAAE/B,gB,+BAQZ,IAAD,EACyB8B,KAAKJ,MAA7B1B,EADD,EACCA,OAAQoC,EADT,EACSA,YAEVa,EAAiBjD,EAAOkD,QAAO,SAACC,GACpC,OAAOA,EAAKhE,KAAKiE,cAAcC,SAASjB,EAAYgB,kBAGtD,OAAOpD,EAAOC,OACZ,kBAACqB,EAAD,KACE,kBAACC,EAAD,kBACA,kBAAC,EAAD,CAAWzC,aAAcgD,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlC,OAAQiD,OAKxB,kBAAC,EAAD,U,GApDYjB,aEGEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,c","file":"static/js/main.76e621cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.f1581987.png\";","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div>\r\n      <input type=\"search\" placeholder=\"Search\" onChange={searchChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./../assets/style/custom/hover.css\";\r\nimport \"./../assets/style/card.css\";\r\nimport mapImage from \"./../assets/images/map.png\";\r\n\r\nconst Card = ({ name, email, address, active }) => {\r\n  return (\r\n    <div\r\n      className={`card ${\r\n        active ? \"card-background\" : \"card-blocked hvr-grow\"\r\n      } card-hover`}\r\n    >\r\n      <div className=\"card-inner\">\r\n        <div className={`card card-front card-${active ? \"blue\" : \"red\"}`}>\r\n          <div className=\"card-badge label\">\r\n            {active ? \"Activated\" : \"Disabled\"}\r\n          </div>\r\n          <img alt={name} width=\"180\" src={`https://robohash.org/${name}`} />\r\n          <div className=\"info\">\r\n            <h4>\r\n              <strong>{name}</strong>\r\n            </h4>\r\n            <p>{email}</p>\r\n          </div>\r\n        </div>\r\n        <div className={`card card-back card-${active ? \"blue\" : \"red\"}`}>\r\n          <img alt=\"address\" width=\"100\" src={mapImage} />\r\n          <div className=\"info\">\r\n            <h4>\r\n              <strong>{address.street},</strong>\r\n            </h4>\r\n            <p>{`${address.suite} - ${address.city}`}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div className={`wrapper ${robots.length ? \"fill\" : \"fit\"}`}>\r\n      {robots.length ? (\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={user.id}\r\n              name={user.name}\r\n              email={user.email}\r\n              address={user.address}\r\n              active={user.active}\r\n            />\r\n          );\r\n        })\r\n      ) : (\r\n        <h1>\r\n          <danger>\r\n            Nothing found\r\n            <span role=\"img\" aria-label=\"ghost\">\r\n              ðŸ‘»\r\n            </span>\r\n          </danger>\r\n        </h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ScrollWrapper = styled.div`\r\n  margin: 1em 0 1em 0 !important;\r\n\r\n  .scroll {\r\n    overflow-y: scroll;\r\n    height: 80vh;\r\n  }\r\n\r\n  .scroll::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n  .scroll::-webkit-scrollbar-track {\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    border-radius: 10px;\r\n  }\r\n  .scroll::-webkit-scrollbar-thumb {\r\n    background-color: #e78632;\r\n    background-image: -webkit-linear-gradient(\r\n      45deg,\r\n      rgba(255, 255, 255, 0.3) 20%,\r\n      transparent 20%,\r\n      transparent 40%,\r\n      rgba(255, 255, 255, 0.3) 40%,\r\n      rgba(255, 255, 255, 0.3) 60%,\r\n      transparent 60%,\r\n      transparent 80%,\r\n      rgba(255, 255, 255, 0.3) 80%\r\n    );\r\n    border-radius: 10px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ScrollWrapper } from \"./../../assets/style/Scroll\";\r\n\r\nconst Scroll = (props) => <ScrollWrapper> {props.children} </ScrollWrapper>;\r\n\r\nexport default Scroll;\r\n","import styled from \"styled-components\";\r\n\r\nexport const LoadingWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-content: center;\r\n  min-height: 100vh;\r\n  background: #0f9e5e;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  text-transform: uppercase;\r\n  color: #fff;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nexport const LoadingInner = styled.div`\r\n  width: 200px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const LoadingBar = styled.div`\r\n  max-width: 200px;\r\n  height: 20px;\r\n  padding: 4px;\r\n  border: 2px solid #fff;\r\n  border-radius: 20px;\r\n  transform: translateX(8%);\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const LoadingMainBar = styled.div`\r\n  width: 100%;\r\n  max-width: 0;\r\n  height: 20px;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  animation: animate 5s infinite;\r\n\r\n  @keyframes animate {\r\n    0% {\r\n      max-width: 0%;\r\n    }\r\n\r\n    20% {\r\n      max-width: 20%;\r\n    }\r\n\r\n    90% {\r\n      max-width: 50%;\r\n    }\r\n\r\n    93% {\r\n      max-width: 80%;\r\n    }\r\n\r\n    100% {\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {\r\n  LoadingWrapper,\r\n  LoadingInner,\r\n  LoadingBar,\r\n  LoadingMainBar,\r\n  Title,\r\n} from \"./../../assets/style/Loading\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <LoadingWrapper>\r\n      <LoadingInner>\r\n        <Title>LOADING...</Title>\r\n        <LoadingBar>\r\n          <LoadingMainBar></LoadingMainBar>\r\n        </LoadingBar>\r\n      </LoadingInner>\r\n    </LoadingWrapper>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import styled from \"styled-components\";\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const MainTitle = styled.h1`\r\n  margin: 1em 0 1em 0 !important;\r\n  font-family: \"SEGA LOGO FONT\";\r\n  color: #1e87f0;\r\n`;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>\r\n        <danger>Ooops. Something Happened</danger>\r\n      </h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\nimport { sort } from \"./../helpers/util\";\nimport SearchBox from \"./../components/SearchBox\";\nimport CardList from \"./../components/CardList\";\nimport Scroll from \"./../components/helpers/Scroll\";\nimport Loading from \"./../components/helpers/Loading\";\nimport { AppWrapper, MainTitle } from \"./../assets/style/App\";\nimport ErrorBoundry from \"./../components/helpers/ErrorBoundry\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((response) =>\n        response\n          .map(({ id, name, email, address }) => {\n            return {\n              id,\n              name,\n              email,\n              address,\n              active: Math.random() >= 0.5,\n            };\n          })\n          .sort((a, b) => sort(a, b, \"name\"))\n      )\n      .then((robots) => {\n        this.setState({ robots });\n      });\n  }\n\n  onSearchChange = ($event) => {\n    this.setState({ searchfield: $event.target.value });\n  };\n\n  render() {\n    const { robots, searchfield } = this.state;\n\n    const filteredRobots = robots.filter((item) => {\n      return item.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    return robots.length ? (\n      <AppWrapper>\n        <MainTitle>RoboCards</MainTitle>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </AppWrapper>\n    ) : (\n      <Loading />\n    );\n  }\n}\n\nexport default App;\n","export const sort = (a, b, parameter) => {\r\n  if (a[parameter] > b[parameter]) {\r\n    return 1;\r\n  }\r\n  if (a[parameter] < b[parameter]) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style/index.css\";\nimport \"./assets/style/custom/custom.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}