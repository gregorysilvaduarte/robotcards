{"version":3,"sources":["assets/images/map.png","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/Loading.js","containers/App.js","helpers/util.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","searchChange","className","type","placeholder","onChange","Card","name","email","address","active","alt","width","src","mapImage","street","suite","city","CardList","robots","map","user","i","key","id","Scroll","props","children","Loading","App","onSearchChange","$event","setState","searchfield","target","value","state","fetch","then","response","json","Math","random","sort","a","b","parameter","this","filteredRobots","filter","item","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc78e32c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.f1581987.png\";","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"input\"\r\n        type=\"search\"\r\n        placeholder=\"Search\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./../assets/css/custom/hover.css\";\r\nimport \"./../assets/css/card.css\";\r\nimport mapImage from \"./../assets/images/map.png\";\r\n\r\nconst Card = ({ name, email, address, active }) => {\r\n  return (\r\n    <div\r\n      className={`card ${\r\n        active ? \"card-background\" : \"card-blocked hvr-grow\"\r\n      } card-hover`}\r\n    >\r\n      <div className=\"card-inner\">\r\n        <div className={`card card-front card-${active ? \"blue\" : \"red\"}`}>\r\n          <div className=\"card-badge label\">\r\n            {active ? \"Activated\" : \"Disabled\"}\r\n          </div>\r\n          <img alt={name} width=\"180\" src={`https://robohash.org/${name}`} />\r\n          <div className=\"info\">\r\n            <h4>\r\n              <strong>{name}</strong>\r\n            </h4>\r\n            <p>{email}</p>\r\n          </div>\r\n        </div>\r\n        <div className={`card card-back card-${active ? \"blue\" : \"red\"}`}>\r\n          <img alt=\"address\" width=\"100\" src={mapImage} />\r\n          <div className=\"info\">\r\n            <h4>\r\n              <strong>{address.street},</strong>\r\n            </h4>\r\n            <p>{`${address.suite} - ${address.city}`}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={user.id}\r\n            name={user.name}\r\n            email={user.email}\r\n            address={user.address}\r\n            active={user.active}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => (\r\n  <div className=\"scroll height-spacement\"> {props.children} </div>\r\n);\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\nimport \"./../assets/css/loading.css\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"main-page card-green\">\r\n      <div className=\"inner\">\r\n        <h2>LOADING...</h2>\r\n        <div className=\"bar\">\r\n          <div className=\"main-bar\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\nimport { sort } from \"./../helpers/util\";\nimport SearchBox from \"./../components/SearchBox\";\nimport CardList from \"./../components/CardList\";\nimport Scroll from \"./../components/Scroll\";\nimport Loading from \"./../components/Loading\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((response) =>\n        response\n          .map(({ id, name, email, address }) => {\n            return {\n              id,\n              name,\n              email,\n              address,\n              active: Math.random() >= 0.5,\n            };\n          })\n          .sort((a, b) => sort(a, b, \"name\"))\n      )\n      .then((robots) => {\n        this.setState({ robots });\n      });\n  }\n\n  onSearchChange = ($event) => {\n    this.setState({ searchfield: $event.target.value });\n  };\n\n  render() {\n    const { robots, searchfield } = this.state;\n\n    const filteredRobots = robots.filter((item) => {\n      return item.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    return robots.length ? (\n      <div className=\"text-center container-search\">\n        <h1 className=\"height-spacement sega-font\">RoboCards</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    ) : (\n      <Loading />\n    );\n  }\n}\n\nexport default App;\n","export const sort = (a, b, parameter) => {\r\n  if (a[parameter] > b[parameter]) {\r\n    return 1;\r\n  }\r\n  if (a[parameter] < b[parameter]) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport \"./assets/css/custom/custom.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}